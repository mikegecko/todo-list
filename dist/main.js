(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(o,n,d,c,s,a){this.name=o||"",this.dueDate=d||function(o){e(1,arguments);var n=t(o);return n.setHours(0,0,0,0),n}(Date.now()),this.notes=c||"",this.priority=s||0,this.isChecked=a||!1,this.id=n}const n=[],d=new function(e,t,n){this.name="Default",this.index=t||0,this.todoList=[],this.addTodoItem=function(e,t,n,d,c){let s=new o(e,this.todoList.length,d,t,n,c);this.todoList.push(s)},this.removeTodoItem=function(e){this.todoList.splice(e,1),this.updateId()},this.updateId=function(){this.todoList.forEach((e=>{e.id=this.todoList.indexOf(e)}))}}("Default",n.length);var c,s,a,i,r;n.push(d),d.addTodoItem("Clean Room","Use vacuum",1,(s=(c=new Date).getFullYear(),a=c.getMonth(),i=c.getDate(),(r=new Date(0)).setFullYear(s,a,i+1),r.setHours(0,0,0,0),r)),d.addTodoItem("Play games","Minecraft",2),d.addTodoItem("Play games","Minecraft",3),d.addTodoItem("Play games","Minecraft",4),d.removeTodoItem(2),console.table(d.todoList);const l=(()=>{document.querySelector(".project-list");const e=document.querySelector(".project-container"),t=document.querySelector("#addProject"),o=document.querySelector("#editProject"),d=document.querySelector("#delProject"),c=document.querySelector("#viewToggle"),s=document.querySelector("#delLocalData");t.addEventListener("click",u),o.addEventListener("click",u),d.addEventListener("click",u),c.addEventListener("click",u),s.addEventListener("click",u);return{update:()=>{n.forEach((t=>{(t=>{const o=document.createElement("div");o.classList.add("project");const n=document.createElement("h2");n.textContent=t.name;const d=document.createElement("div");d.classList.add("project-content"),t.todoList.forEach((e=>{console.log(e);const t=document.createElement("div");t.classList.add("todo-item");const o=document.createElement("div");o.textContent=e.name;const n=document.createElement("div");n.classList.add("notes"),n.textContent=e.notes;const c=document.createElement("div");c.textContent=e.dueDate,o.appendChild(n),t.appendChild(o),t.appendChild(c),d.appendChild(t)})),o.appendChild(n),o.appendChild(d),e.appendChild(o)})(t),console.log(t)}))}}})();function u(){console.log("Button Clicked"),l.update()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,