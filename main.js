(()=>{"use strict";function t(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function e(e){t(1,arguments);var o=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===o?new Date(e.getTime()):"number"==typeof e||"[object Number]"===o?new Date(e):("string"!=typeof e&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(o,n,s,i,a,r){this.name=o||"",this.dueDate=s||function(o){t(1,arguments);var n=e(o);return n.setHours(0,0,0,0),n}(Date.now()),this.notes=i||"",this.priority=a||0,this.isChecked=r||!1,this.id=n}const n=new function(t,e,n){this.name="Default",this.index=0,this.todoList=[],this.addTodoItem=function(t,e,n,s,i){let a=new o(t,this.todoList.length,s,e,n,i);this.todoList.push(a)},this.removeTodoItem=function(t){this.todoList.splice(t,1),this.updateId()},this.updateId=function(){this.todoList.forEach((t=>{t.id=this.todoList.indexOf(t)}))}}("Default",0);var s,i,a,r,d;[].push(n),n.addTodoItem("Clean Room","Use vacuum",1,(i=(s=new Date).getFullYear(),a=s.getMonth(),r=s.getDate(),(d=new Date(0)).setFullYear(i,a,r+1),d.setHours(0,0,0,0),d)),n.addTodoItem("Play games","Minecraft",2),n.addTodoItem("Play games","Minecraft",3),n.addTodoItem("Play games","Minecraft",4),n.removeTodoItem(2),console.table(n.todoList)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,