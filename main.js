(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Raleway&display=swap);"]),a.push([e.id,"/* Color scheme\n    Cerulean: #4484CE\n    Aluminium: #D9D9D9\n    Light: #F9CF00\n    Tangerine: #F19F4D\n*/\n/* Rules for sizing the icon. */\n.material-icons.md-18 {\n    font-size: 18px;\n}\n\n.material-icons.md-24 {\n    font-size: 24px;\n}\n\n.material-icons.md-36 {\n    font-size: 36px;\n}\n\n.material-icons.md-48 {\n    font-size: 48px;\n}\n\n.material-symbols-outlined.md-18 {\n    font-size: 18px;\n}\n\n.material-symbols-outlined.md-30 {\n    font-size: 30px;\n}\n\n.material-symbols-outlined.md-36 {\n    font-size: 36px;\n}\n\n.material-symbols-outlined.md-48 {\n    font-size: 48px\n}\n\n* {\n    font-family: 'Raleway', sans-serif;\n}\n\nbody {\n    height: 100vh;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    min-height: 100%;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #F19F4D;\n}\n\n.header>div {\n    display: flex;\n    align-items: center;\n}\n\n.control-bar {\n    display: flex;\n    gap: 1rem;\n    margin: 1rem;\n}\n\nbutton {\n    background: none;\n    border: none;\n    color: rgba(0, 0, 0, 0.54);\n    cursor: pointer;\n}\n\nbutton:hover {\n    color: black;\n}\n\n.tooltip,\n.tooltip-right,\n.tooltip-project {\n    position: relative;\n    display: inline-block;\n}\n\n.tooltip .tooltiptext {\n    visibility: hidden;\n    width: 120px;\n    background-color: black;\n    color: #fff;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    width: 120px;\n    top: 100%;\n    left: 50%;\n    margin-left: -60px;\n    font-size: 14px;\n}\n\n.tooltip:hover .tooltiptext {\n    visibility: visible;\n}\n\n.tooltip .tooltiptext::after {\n    content: \" \";\n    position: absolute;\n    bottom: 100%;\n    /* Positions the arrow */\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent black transparent;\n}\n\n.tooltip-right:hover .tooltiptext {\n    visibility: visible;\n}\n\n.tooltip-right .tooltiptext {\n    visibility: hidden;\n    width: 120px;\n    color: #797979;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    width: 120px;\n    top: -5px;\n    left: 100%;\n    font-size: 14px;\n}\n\n.tooltip-project:hover .tooltiptext {\n    visibility: visible;\n}\n\n.tooltip-project .tooltiptext {\n    visibility: hidden;\n    width: 120px;\n    color: #797979;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    width: 120px;\n    top: 15px;\n    left: 100%;\n    font-size: 14px;\n}\n\n.content {\n    display: flex;\n    flex: 1;\n    background-color: #ffffff;\n    flex-direction: row;\n}\n\n.sidebar {\n    background-color: rgb(240, 240, 240);\n    width: 300px;\n    height: 100vh;\n    border-right: 2px solid rgb(236, 236, 236);\n}\n\n.sidebar>h3 {\n    margin: 1rem 1rem 0 1rem;\n    border-bottom: 2px solid #797979;\n}\n\nli {\n    cursor: pointer;\n}\n\nli:hover {\n    text-decoration: underline;\n}\n\n.project-list {\n    list-style-type: none;\n}\n\n.project-container {\n    margin: 1rem;\n    flex: 1;\n    max-height: 90vh;\n    overflow-x: hidden;\n    overflow-y: auto;\n}\n\n.project-content {\n    display: flex;\n    flex-direction: column;\n}\n\n.todo-item {\n    font-size: 18px;\n    border-bottom: 2px solid rgb(236, 236, 236);\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 1rem;\n    height: 50px;\n}\n\n.todo-item:hover {\n    border-bottom: 2px solid black;\n    cursor: pointer;\n}\n\n.add-item {\n    font-size: 18px;\n    border-bottom: 2px solid rgb(236, 236, 236);\n    display: flex;\n    flex-direction: row;\n    margin: 1rem;\n    margin-top: 0;\n    height: 50px;\n    padding-left: 1rem;\n    color: #797979;\n    justify-content: center;\n}\n\n.add-item:hover {\n    color: black;\n    cursor: pointer;\n    border-bottom: 2px solid black;\n}\n\n.todo-item>div {\n    display: flex;\n    flex-direction: row;\n    gap: 1rem;\n\n}\n\n.priority-marker {\n    cursor: pointer;\n    color: black;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    border: solid transparent 2px;\n}\n\n.priority-selected {\n    border: solid black 2px;\n}\n\n.priority-marker:hover {\n    border: solid black 2px;\n}\n\n.default-priority {\n    background-color: #797979;\n}\n\n.high-priority {\n    background-color: red;\n}\n\n.medium-priority {\n    background-color: orangered;\n}\n\n.low-priority {\n    background-color: orange;\n}\n\n.priority-modal {\n    display: flex;\n    gap: 2rem;\n}\n\n.notes {\n    font-size: .9rem;\n    padding-top: 4px;\n    padding-left: 1rem;\n}\n\n.modal-todo,\n.modal-list {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    ;\n    visibility: hidden;\n    opacity: 0;\n    z-index: 5;\n}\n\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    background-color: white;\n    padding: 1rem;\n    width: 300px;\n    height: 150;\n    transform: translate(-50%, -50%);\n    gap: 1rem;\n    border-radius: .5rem;\n    align-items: center;\n}\n\n.modal-content>:first-child {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n}\n\n.show-modal {\n    opacity: 1;\n    visibility: visible;\n}\n\n.close-button {\n    color: #797979;\n    align-self: flex-end;\n    cursor: pointer;\n    font-size: 32px;\n    position: absolute;\n    right: 8px;\n    top: -4px;\n}\n\n.close-button:hover {\n    color: black;\n}\n\ninput {\n    border-radius: .4rem;\n    border: solid 1px #797979;\n    padding-left: .5rem;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Raleway&display=swap');\n\n/* Color scheme\n    Cerulean: #4484CE\n    Aluminium: #D9D9D9\n    Light: #F9CF00\n    Tangerine: #F19F4D\n*/\n/* Rules for sizing the icon. */\n.material-icons.md-18 {\n    font-size: 18px;\n}\n\n.material-icons.md-24 {\n    font-size: 24px;\n}\n\n.material-icons.md-36 {\n    font-size: 36px;\n}\n\n.material-icons.md-48 {\n    font-size: 48px;\n}\n\n.material-symbols-outlined.md-18 {\n    font-size: 18px;\n}\n\n.material-symbols-outlined.md-30 {\n    font-size: 30px;\n}\n\n.material-symbols-outlined.md-36 {\n    font-size: 36px;\n}\n\n.material-symbols-outlined.md-48 {\n    font-size: 48px\n}\n\n* {\n    font-family: 'Raleway', sans-serif;\n}\n\nbody {\n    height: 100vh;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    min-height: 100%;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #F19F4D;\n}\n\n.header>div {\n    display: flex;\n    align-items: center;\n}\n\n.control-bar {\n    display: flex;\n    gap: 1rem;\n    margin: 1rem;\n}\n\nbutton {\n    background: none;\n    border: none;\n    color: rgba(0, 0, 0, 0.54);\n    cursor: pointer;\n}\n\nbutton:hover {\n    color: black;\n}\n\n.tooltip,\n.tooltip-right,\n.tooltip-project {\n    position: relative;\n    display: inline-block;\n}\n\n.tooltip .tooltiptext {\n    visibility: hidden;\n    width: 120px;\n    background-color: black;\n    color: #fff;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    width: 120px;\n    top: 100%;\n    left: 50%;\n    margin-left: -60px;\n    font-size: 14px;\n}\n\n.tooltip:hover .tooltiptext {\n    visibility: visible;\n}\n\n.tooltip .tooltiptext::after {\n    content: \" \";\n    position: absolute;\n    bottom: 100%;\n    /* Positions the arrow */\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent black transparent;\n}\n\n.tooltip-right:hover .tooltiptext {\n    visibility: visible;\n}\n\n.tooltip-right .tooltiptext {\n    visibility: hidden;\n    width: 120px;\n    color: #797979;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    width: 120px;\n    top: -5px;\n    left: 100%;\n    font-size: 14px;\n}\n\n.tooltip-project:hover .tooltiptext {\n    visibility: visible;\n}\n\n.tooltip-project .tooltiptext {\n    visibility: hidden;\n    width: 120px;\n    color: #797979;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    width: 120px;\n    top: 15px;\n    left: 100%;\n    font-size: 14px;\n}\n\n.content {\n    display: flex;\n    flex: 1;\n    background-color: #ffffff;\n    flex-direction: row;\n}\n\n.sidebar {\n    background-color: rgb(240, 240, 240);\n    width: 300px;\n    height: 100vh;\n    border-right: 2px solid rgb(236, 236, 236);\n}\n\n.sidebar>h3 {\n    margin: 1rem 1rem 0 1rem;\n    border-bottom: 2px solid #797979;\n}\n\nli {\n    cursor: pointer;\n}\n\nli:hover {\n    text-decoration: underline;\n}\n\n.project-list {\n    list-style-type: none;\n}\n\n.project-container {\n    margin: 1rem;\n    flex: 1;\n    max-height: 90vh;\n    overflow-x: hidden;\n    overflow-y: auto;\n}\n\n.project-content {\n    display: flex;\n    flex-direction: column;\n}\n\n.todo-item {\n    font-size: 18px;\n    border-bottom: 2px solid rgb(236, 236, 236);\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 1rem;\n    height: 50px;\n}\n\n.todo-item:hover {\n    border-bottom: 2px solid black;\n    cursor: pointer;\n}\n\n.add-item {\n    font-size: 18px;\n    border-bottom: 2px solid rgb(236, 236, 236);\n    display: flex;\n    flex-direction: row;\n    margin: 1rem;\n    margin-top: 0;\n    height: 50px;\n    padding-left: 1rem;\n    color: #797979;\n    justify-content: center;\n}\n\n.add-item:hover {\n    color: black;\n    cursor: pointer;\n    border-bottom: 2px solid black;\n}\n\n.todo-item>div {\n    display: flex;\n    flex-direction: row;\n    gap: 1rem;\n\n}\n\n.priority-marker {\n    cursor: pointer;\n    color: black;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    border: solid transparent 2px;\n}\n\n.priority-selected {\n    border: solid black 2px;\n}\n\n.priority-marker:hover {\n    border: solid black 2px;\n}\n\n.default-priority {\n    background-color: #797979;\n}\n\n.high-priority {\n    background-color: red;\n}\n\n.medium-priority {\n    background-color: orangered;\n}\n\n.low-priority {\n    background-color: orange;\n}\n\n.priority-modal {\n    display: flex;\n    gap: 2rem;\n}\n\n.notes {\n    font-size: .9rem;\n    padding-top: 4px;\n    padding-left: 1rem;\n}\n\n.modal-todo,\n.modal-list {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    ;\n    visibility: hidden;\n    opacity: 0;\n    z-index: 5;\n}\n\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    background-color: white;\n    padding: 1rem;\n    width: 300px;\n    height: 150;\n    transform: translate(-50%, -50%);\n    gap: 1rem;\n    border-radius: .5rem;\n    align-items: center;\n}\n\n.modal-content>:first-child {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n}\n\n.show-modal {\n    opacity: 1;\n    visibility: visible;\n}\n\n.close-button {\n    color: #797979;\n    align-self: flex-end;\n    cursor: pointer;\n    font-size: 32px;\n    position: absolute;\n    right: 8px;\n    top: -4px;\n}\n\n.close-button:hover {\n    color: black;\n}\n\ninput {\n    border-radius: .4rem;\n    border: solid 1px #797979;\n    padding-left: .5rem;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var d=e[s],l=r.base?d[0]+r.base:d[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var A=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var p=o(m,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var d=r(e,o),l=0;l<i.length;l++){var c=n(i[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){return e(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function r(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(n){if(e(1,arguments),!t(n)&&"number"!=typeof n)return!1;var o=r(n);return!isNaN(Number(o))}var i={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function a(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const s={date:a({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:a({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:a({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var d={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(e){return function(t,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,a=o.width?String(o.width):i;r=e.formattingValues[a]||e.formattingValues[i]}else{var s=e.defaultWidth,d=o.width?String(o.width):e.defaultWidth;r=e.values[d]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const c={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function u(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(o);if(!i)return null;var a,s=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?m(d,(function(e){return e.test(s)})):A(d,(function(e){return e.test(s)}));a=e.valueCallback?e.valueCallback(l):l,a=n.valueCallback?n.valueCallback(a):a;var c=t.slice(s.length);return{value:a,rest:c}}}function A(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function m(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var p,f={ordinalNumber:(p={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(p.matchPattern);if(!n)return null;var r=n[0],o=e.match(p.parsePattern);if(!o)return null;var i=p.valueCallback?p.valueCallback(o[0]):o[0];i=t.valueCallback?t.valueCallback(i):i;var a=e.slice(r.length);return{value:i,rest:a}}),era:u({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:u({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:u({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:u({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:u({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const h={code:"en-US",formatDistance:function(e,t,n){var r,o=i[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:s,formatRelative:function(e,t,n,r){return d[e]},localize:c,match:f,options:{weekStartsOn:0,firstWeekContainsDate:1}};function g(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function C(t,n){e(2,arguments);var o=r(t).getTime(),i=g(n);return new Date(o+i)}function b(t,n){e(2,arguments);var r=g(n);return C(t,-r)}var v=864e5;function y(t){e(1,arguments);var n=1,o=r(t),i=o.getUTCDay(),a=(i<n?7:0)+i-n;return o.setUTCDate(o.getUTCDate()-a),o.setUTCHours(0,0,0,0),o}function w(t){e(1,arguments);var n=r(t),o=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(o+1,0,4),i.setUTCHours(0,0,0,0);var a=y(i),s=new Date(0);s.setUTCFullYear(o,0,4),s.setUTCHours(0,0,0,0);var d=y(s);return n.getTime()>=a.getTime()?o+1:n.getTime()>=d.getTime()?o:o-1}function x(t){e(1,arguments);var n=w(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var o=y(r);return o}var I=6048e5;function B(t,n){e(1,arguments);var o=n||{},i=o.locale,a=i&&i.options&&i.options.weekStartsOn,s=null==a?0:g(a),d=null==o.weekStartsOn?s:g(o.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=r(t),c=l.getUTCDay(),u=(c<d?7:0)+c-d;return l.setUTCDate(l.getUTCDate()-u),l.setUTCHours(0,0,0,0),l}function k(t,n){e(1,arguments);var o=r(t),i=o.getUTCFullYear(),a=n||{},s=a.locale,d=s&&s.options&&s.options.firstWeekContainsDate,l=null==d?1:g(d),c=null==a.firstWeekContainsDate?l:g(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(i+1,0,c),u.setUTCHours(0,0,0,0);var A=B(u,n),m=new Date(0);m.setUTCFullYear(i,0,c),m.setUTCHours(0,0,0,0);var p=B(m,n);return o.getTime()>=A.getTime()?i+1:o.getTime()>=p.getTime()?i:i-1}function E(t,n){e(1,arguments);var r=n||{},o=r.locale,i=o&&o.options&&o.options.firstWeekContainsDate,a=null==i?1:g(i),s=null==r.firstWeekContainsDate?a:g(r.firstWeekContainsDate),d=k(t,n),l=new Date(0);l.setUTCFullYear(d,0,s),l.setUTCHours(0,0,0,0);var c=B(l,n);return c}var T=6048e5;function D(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const S=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return D("yy"===t?r%100:r,t.length)},L=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):D(n+1,2)},M=function(e,t){return D(e.getUTCDate(),t.length)},Y=function(e,t){return D(e.getUTCHours()%12||12,t.length)},U=function(e,t){return D(e.getUTCHours(),t.length)},P=function(e,t){return D(e.getUTCMinutes(),t.length)},N=function(e,t){return D(e.getUTCSeconds(),t.length)},j=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return D(Math.floor(r*Math.pow(10,n-3)),t.length)};var z={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return S(e,t)},Y:function(e,t,n,r){var o=k(e,r),i=o>0?o:1-o;return"YY"===t?D(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):D(i,t.length)},R:function(e,t){return D(w(e),t.length)},u:function(e,t){return D(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return D(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return D(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return L(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return D(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,o,i){var a=function(t,n){e(1,arguments);var o=r(t),i=B(o,n).getTime()-E(o,n).getTime();return Math.round(i/T)+1}(t,i);return"wo"===n?o.ordinalNumber(a,{unit:"week"}):D(a,n.length)},I:function(t,n,o){var i=function(t){e(1,arguments);var n=r(t),o=y(n).getTime()-x(n).getTime();return Math.round(o/I)+1}(t);return"Io"===n?o.ordinalNumber(i,{unit:"week"}):D(i,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):M(e,t)},D:function(t,n,o){var i=function(t){e(1,arguments);var n=r(t),o=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=n.getTime(),a=o-i;return Math.floor(a/v)+1}(t);return"Do"===n?o.ordinalNumber(i,{unit:"dayOfYear"}):D(i,n.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return D(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return D(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return D(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Y(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):U(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):P(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):N(e,t)},S:function(e,t){return j(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return O(o);case"XXXX":case"XX":return W(o);default:return W(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return O(o);case"xxxx":case"xx":return W(o);default:return W(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+q(o,":");default:return"GMT"+W(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+q(o,":");default:return"GMT"+W(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return D(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return D((r._originalDate||e).getTime(),t.length)}};function q(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=t||"";return n+String(o)+a+D(i,2)}function O(e,t){return e%60==0?(e>0?"-":"+")+D(Math.abs(e)/60,2):W(e,t)}function W(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+D(Math.floor(o/60),2)+n+D(o%60,2)}const F=z;function Z(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function H(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const R={p:H,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return Z(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Z(o,t)).replace("{{time}}",H(i,t))}};function X(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Q=["D","DD"],G=["YY","YYYY"];function J(e){return-1!==Q.indexOf(e)}function V(e){return-1!==G.indexOf(e)}function _(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var $=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ee=/^'([^]*?)'?$/,te=/''/g,ne=/[a-zA-Z]/;function re(t,n,i){e(2,arguments);var a=String(n),s=i||{},d=s.locale||h,l=d.options&&d.options.firstWeekContainsDate,c=null==l?1:g(l),u=null==s.firstWeekContainsDate?c:g(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=d.options&&d.options.weekStartsOn,m=null==A?0:g(A),p=null==s.weekStartsOn?m:g(s.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var f=r(t);if(!o(f))throw new RangeError("Invalid time value");var C=X(f),v=b(f,C),y={firstWeekContainsDate:u,weekStartsOn:p,locale:d,_originalDate:f},w=a.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,R[t])(e,d.formatLong,y):e})).join("").match($).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return oe(e);var o=F[r];if(o)return!s.useAdditionalWeekYearTokens&&V(e)&&_(e,n,t),!s.useAdditionalDayOfYearTokens&&J(e)&&_(e,n,t),o(v,e,d.localize,y);if(r.match(ne))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return w}function oe(e){return e.match(ee)[1].replace(te,"'")}Math.pow(10,8);var ie=36e5;function ae(t,n){e(1,arguments);var r=n||{},o=null==r.additionalDigits?2:g(r.additionalDigits);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,a=ue(t);if(a.date){var s=Ae(a.date,o);i=me(s.restDateString,s.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var d,l=i.getTime(),c=0;if(a.time&&(c=fe(a.time),isNaN(c)))return new Date(NaN);if(!a.timezone){var u=new Date(l+c),A=new Date(0);return A.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),A.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),A}return d=ge(a.timezone),isNaN(d)?new Date(NaN):new Date(l+c+d)}var se={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},de=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,le=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ce=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ue(e){var t,n={},r=e.split(se.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],se.timeZoneDelimiter.test(n.date)&&(n.date=e.split(se.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=se.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}function Ae(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?o:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function me(e,t){if(null===t)return new Date(NaN);var n=e.match(de);if(!n)return new Date(NaN);var r=!!n[4],o=pe(n[1]),i=pe(n[2])-1,a=pe(n[3]),s=pe(n[4]),d=pe(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,d)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,s,d):new Date(NaN);var l=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(Ce[t]||(be(e)?29:28))}(t,i,a)&&function(e,t){return t>=1&&t<=(be(e)?366:365)}(t,o)?(l.setUTCFullYear(t,i,Math.max(o,a)),l):new Date(NaN)}function pe(e){return e?parseInt(e):1}function fe(e){var t=e.match(le);if(!t)return NaN;var n=he(t[1]),r=he(t[2]),o=he(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*ie+6e4*r+1e3*o:NaN}function he(e){return e&&parseFloat(e.replace(",","."))||0}function ge(e){if("Z"===e)return 0;var t=e.match(ce);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*ie+6e4*o):NaN}var Ce=[31,null,31,30,31,30,31,31,30,31,30,31];function be(e){return e%400==0||e%4==0&&e%100!=0}const ve=[];function ye(e,t,n){this.name=e||"",this.index=t||0,this.todoList=n||[],this.addTodoItem=function(e,t,n,r,o){let i=new we(e,this.todoList.length,r,t,n,o);this.todoList.push(i)}}function we(t,n,o,i,a,s){this.name=t||"",this.dueDate=re(o?ae(o):function(t){e(1,arguments);var n=r(t);return n.setHours(0,0,0,0),n}(Date.now()),"PPPP"),this.notes=i||"",this.priority=a||0,this.isChecked=s||!1,this.id=n}function xe(){localStorage.clear()}Storage.prototype.setObject=function(e,t){return this.setItem(e,JSON.stringify(t))},Storage.prototype.getObject=function(e){return JSON.parse(this.getItem(e))};var Ie=n(379),Be=n.n(Ie),ke=n(795),Ee=n.n(ke),Te=n(569),De=n.n(Te),Se=n(565),Le=n.n(Se),Me=n(216),Ye=n.n(Me),Ue=n(589),Pe=n.n(Ue),Ne=n(28),je={};je.styleTagTransform=Pe(),je.setAttributes=Le(),je.insert=De().bind(null,"head"),je.domAPI=Ee(),je.insertStyleElement=Ye(),Be()(Ne.Z,je),Ne.Z&&Ne.Z.locals&&Ne.Z.locals;const ze=(()=>{let e=null,t=null;return{setListIndex:t=>{e=t},setItemIndex:e=>{t=e},createItem:(t,n,r,o)=>{!function(e,t,n,r,o,i){let a=new we(t,ve[e].todoList.length,o,n,r,void 0);ve[e].todoList.push(a)}(e,t,n,o,r)},createList:e=>{const t=new ye(e,ve.length);ve.push(t)},completeItem:(e,t)=>{ve[e].todoList[t].isChecked=!0},editItem:(n,r,o,i)=>{const a=ve[e];a.todoList[t].name=n,a.todoList[t].notes=r,a.todoList[t].priority=i,o&&(a.todoList[t].dueDate=re(ae(o),"PPPP"))},deleteItem:(e,t)=>{var n,r;r=t,ve[n=e].todoList.splice(r,1),function(e){ve[e].todoList.forEach((t=>{t.id=ve[e].todoList.indexOf(t)}))}(n)},editList:t=>{ve[e].name=t},deleteList:e=>{ve.splice(e,1)}}})(),qe=(()=>{let e=0,t=!1;const n=document.querySelector(".project-list"),r=document.querySelector(".project-container"),o=document.querySelector("#addProject"),i=document.querySelector("#editProject"),a=document.querySelector("#saveProject"),s=document.querySelector("#viewToggle"),d=document.querySelector("#delLocalData"),l=document.querySelector(".modal-todo"),c=document.querySelector(".modal-title"),u=document.querySelector("#T"),A=document.querySelector("#L"),m=document.querySelector("#newName"),p=document.querySelector("#newNotes"),f=document.querySelector("#newDueDate"),h=document.querySelector("#submitNewItem"),g=document.querySelector("#dp"),C=document.querySelector("#lp"),b=document.querySelector("#mp"),v=document.querySelector("#hp"),y=document.querySelector(".modal-list"),w=document.querySelector("#submitNewList"),x=document.querySelector("#newList"),I=()=>{We(r),We(n),localStorage.setObject("projects",ve),ve.forEach((e=>{B(e,D(ve.indexOf(e))),console.table(e.todoList)}))},B=(e,t)=>{let o=ve.indexOf(e);const i=document.createElement("li");i.textContent=e.name,n.appendChild(i);const a=document.createElement("div");a.classList.add("project");const s=document.createElement("h2");s.textContent=e.name;const d=document.createElement("div");d.classList.add("project-content");const l=document.createElement("div");l.classList.add("tooltip-project"),e.todoList.forEach((t=>{let n=e.todoList.indexOf(t),r=ve.indexOf(e).toString()+"-"+e.todoList.indexOf(t).toString();if(t.isChecked)return;const i=document.createElement("div");i.classList.add("todo-item"),i.id=r,i.addEventListener("click",z);const a=document.createElement("div"),s=document.createElement("span");s.classList.add("priority-marker",k(t.priority)),a.appendChild(s);const l=document.createElement("div");l.textContent=t.name,l.classList.add("tooltip-right");const c=document.createElement("div");c.classList.add("notes"),c.textContent=t.notes;const u=document.createElement("div");u.textContent=t.dueDate,l.appendChild(c),l.appendChild(S(o,n)),a.appendChild(l),i.appendChild(a),i.appendChild(u),d.appendChild(i)})),d.appendChild(t),l.appendChild(s),l.appendChild(L(o)),a.appendChild(l),a.appendChild(d),r.appendChild(a)},k=e=>{switch(e){case 0:default:return"default-priority";case 1:return"low-priority";case 2:return"medium-priority";case 3:return"high-priority"}},E=e=>{let t=e;if("object"==typeof e)t=e.currentTarget.id;else switch(t){case 0:default:t="dp";break;case 1:t="lp";break;case 2:t="mp";break;case 3:t="hp"}switch(t){case"dp":default:T(),g.classList.add("priority-selected"),X(0);break;case"lp":T(),C.classList.add("priority-selected"),X(1);break;case"mp":T(),b.classList.add("priority-selected"),X(2);break;case"hp":T(),v.classList.add("priority-selected"),X(3)}},T=()=>{g.classList.remove("priority-selected"),C.classList.remove("priority-selected"),b.classList.remove("priority-selected"),v.classList.remove("priority-selected")},D=e=>{let t="add"+e;const n=document.createElement("div");n.classList.add("add-item");const r=document.createElement("span");return r.classList.add("material-symbols-outlined","md-36"),r.textContent="add",n.appendChild(r),n.id=t,n.addEventListener("click",M),n},S=(e,t)=>{const n=document.createElement("span");n.classList.add("tooltiptext");const r=document.createElement("button"),o=document.createElement("button"),i=document.createElement("span"),a=document.createElement("span");return i.textContent="edit",a.textContent="delete",i.classList.add("material-symbols-outlined"),a.classList.add("material-symbols-outlined"),r.id="E"+e.toString()+t.toString(),o.id="D"+e.toString()+t.toString(),r.addEventListener("click",q),o.addEventListener("click",O),r.appendChild(i),o.appendChild(a),n.appendChild(r),n.appendChild(o),n},L=e=>{const t=document.createElement("span");t.classList.add("tooltiptext");const n=document.createElement("button"),r=document.createElement("button"),o=document.createElement("span"),i=document.createElement("span");return o.textContent="edit",i.textContent="delete",o.classList.add("material-symbols-outlined"),i.classList.add("material-symbols-outlined"),n.id="EP"+e.toString(),r.id="DP"+e.toString(),n.addEventListener("click",F),r.addEventListener("click",Z),n.appendChild(o),r.appendChild(i),t.appendChild(n),t.appendChild(r),t},M=e=>{let t=e.currentTarget.id;t=t.replace(/\D/g,""),W(t),ze.setListIndex(t),Y()},Y=()=>{l.classList.toggle("show-modal"),P()},U=()=>{y.classList.toggle("show-modal"),P()},P=()=>{R()||(m.value="",p.value="",f.value="",x.value="",T())},N=()=>{if(""==m.value)alert("Please enter a name.");else{const e=Q();R()?(ze.editItem(m.value,p.value,f.value,e),H(!1)):ze.createItem(m.value,p.value,f.value,e),I(),Y()}},j=()=>{""==x.value?alert("Please enter a name."):(R()?(ze.editList(x.value),H(!1)):ze.createList(x.value),I(),U())},z=e=>{const t=e.currentTarget.id.split("-"),n=t[0],r=t[1];ze.completeItem(n,r),I()},q=e=>{e.stopPropagation(),H(!0);let t=e.currentTarget.id;t=t.replace(/\D/g,"");const n=t.split("");W(n[0],1),ze.setListIndex(n[0]),ze.setItemIndex(n[1]),((e,t)=>{const n=ve[e];m.value=n.todoList[t].name,p.value=n.todoList[t].notes,f.value=ae(n.todoList[t].dueDate),E(n.todoList[t].priority)})(n[0],n[1]),Y()},O=e=>{e.stopPropagation();let t=e.currentTarget.id;t=t.replace(/\D/g,"");const n=t.split("");ze.deleteItem(n[0],n[1]),I()},W=(e,t)=>{const n=document.createElement("span");n.classList.add("list-name"),n.textContent=ve[e].name,1==t?(c.textContent="Editing item in ",c.appendChild(n)):(c.textContent="New item for ",c.appendChild(n))},F=e=>{e.stopPropagation(),H(!0);let t=e.currentTarget.id;var n;t=t.replace(/\D/g,""),ze.setListIndex(t),n=t,x.value=ve[n].name,U()},Z=e=>{e.stopPropagation();let t=e.currentTarget.id;t=t.replace(/\D/g,""),ze.deleteList(t),I()},H=e=>{t=e},R=()=>t,X=t=>{e=t},Q=()=>e;return{update:I,uiAddHandlers:()=>{o.addEventListener("click",U),i.addEventListener("click",Oe),a.addEventListener("click",Oe),s.addEventListener("click",Oe),d.addEventListener("click",xe),u.addEventListener("click",Y),A.addEventListener("click",U),h.addEventListener("click",N),w.addEventListener("click",j),g.addEventListener("click",E),C.addEventListener("click",E),b.addEventListener("click",E),v.addEventListener("click",E)},onPageLoad:()=>{!function(){let e=localStorage.getObject("projects");if(null==e){const e=new ye("Default List",ve.length);ve.push(e)}else e.forEach((e=>{for(const t in ye)Object.hasOwnProperty.call(ye,t)&&(e[t]=ye[t]);ve.push(e)}))}(),I()}}})();function Oe(e){e.stopPropagation(),console.log("Button Clicked"),qe.update()}function We(e){for(;e.firstChild;)e.removeChild(e.firstChild)}qe.uiAddHandlers(),qe.onPageLoad()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,